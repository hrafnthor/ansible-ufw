- name: "ufw | assert | validate input config"
  ansible.utils.validate:
    data: "{{ ufw }}"
    criteria: "{{ lookup('file', 'assertions/criteria/ufw-criteria.json') | from_json }}"
    engine: ansible.utils.jsonschema
  run_once: yes
  delegate_to: localhost
  when:
    - ufw is defined

- name: "ufw | install package"
  ansible.builtin.apt:
    name: "{{ 'ufw=' + ufw.version if ufw.version is defined and ufw.version != 'latest' else 'ufw' }}"
    state: >-
      {{ 'absent' if ufw.remove is defined and ufw.remove
          else 'present' if ufw.version is defined and ufw.version != 'latest'
          else 'latest' }}
  when:
    - ufw is defined
    - ansible_distribution in ["Ubuntu", "Debian", "PopOS"]

- name: "ufw | configure logging"
  community.general.ufw:
    logging: "{{ ufw.logging }}"
  when:
    - ufw is defined
    - ufw.remove is not defined or not ufw.remove
    - ufw.logging is defined

- name: "ufw | apply profiles"
  community.general.ufw:
    name: "{{ profile.name }}"
    rule: "{{ profile.rule }}"
    delete: "{{ profile.delete | default(false) }}"
  loop: "{{ ufw.profiles }}"
  loop_control:
    loop_var: profile
  when:
    - ufw is defined
    - ufw.remove is not defined or not ufw.remove
    - ufw.profiles is defined

- name: "ufw | set incoming rules"
  community.general.ufw:
    rule: "{{ rule.policy }}"
    delete: "{{ rule.delete | default(false) }}"
    direction: "in"
    proto: "{{ rule.protocol | default('any') }}"
    from_ip: "{{ rule.from_ip | default('any') }}"
    to_port: "{{ rule.to_port }}"
    comment: "{{ rule.comment | default('') }}"
  loop: "{{ ufw.incoming }}"
  loop_control:
    loop_var: rule
  when:
    - ufw is defined
    - ufw.remove is not defined or not ufw.remove
    - ufw.incoming is defined

- name: "ufw | set outgoing rules"
  community.general.ufw:
    rule: "{{ rule.policy }}"
    delete: "{{ rule.delete | default(false) }}"
    direction: "out"
    proto: "{{ rule.protocol | default('any') }}"
    to_ip: "{{ rule.to_ip | default('any') }}"
    to_port: "{{ rule.to_port }}"
    comment: "{{ rule.comment | default('') }}"
  loop: "{{ ufw.outgoing }}"
  loop_control:
    loop_var: rule
  when:
    - ufw is defined
    - ufw.remove is not defined or not ufw.remove
    - ufw.outgoing is defined

- name: "ufw | set default for incoming"
  community.general.ufw:
    direction: "incoming"
    policy: "{{ ufw.defaults.incoming }}"
  when:
    - ufw is defined
    - ufw.remove is not defined or not ufw.remove
    - ufw.defaults is defined
    - ufw.defaults.incoming is defined

- name: "ufw | set default for outgoing"
  community.general.ufw:
    direction: "outgoing"
    policy: "{{ ufw.defaults.outgoing }}"
  when:
    - ufw is defined
    - ufw.remove is not defined or not ufw.remove
    - ufw.defaults is defined
    - ufw.defaults.outgoing is defined

- name: "ufw | change state"
  community.general.ufw:
    state: "{{ ufw.state }}"
  when:
    - ufw is defined
    - ufw.remove is not defined or not ufw.remove
    - ufw.state is defined
